<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted-->
        <property name="maxTotal" value="${redis.pool.maxTotal}"></property>
        <!--控制一个pool最多有多少个状态为idle(空闲)的jedis实例-->
        <property name="maxIdle" value="${redis.pool.maxIdle}"></property>
        <!--控制一个pool最少有多少个状态为idle(空闲)的jedis实例-->
        <property name="minIdle" value="${redis.pool.minIdle}"></property>
        <!--表示当获取一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException-->
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"></property>

        <!--表示idle object evitor两次扫描之间要sleep的毫秒数；-->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}"></property>
        <!--表示一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；-->
        <property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"></property>
        <!--表示idle object evitor每次扫描的最多的对象数-->
        <property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}"></property>

        <!--在获取一个jedis实例时，是否提前进行验证操作；如果为true，则得到的jedis实例均是可用的；-->
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"></property>
        <!--在返回jedis实例到Pool时，是否提前进行验证操作-->
        <property name="testOnReturn" value="${redis.pool.testOnReturn}"></property>
        <!--如果为true，表示有一个idle object evitor线程对idle object进行扫描，如果validate失败，此object会被从pool中drop掉；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义-->
        <property name="testWhileIdle" value="${redis.pool.testWhileIdle}"></property>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          destroy-method="destroy">
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <property name="hostName" value="${redis.hostName}"/>
        <property name="port" value="${redis.port}"/>
        <property name="timeout" value="${redis.timeout}"/>
        <property name="database" value="${redis.database}"/>
        <property name="password" value="${redis.password}"/>
        <property name="usePool" value="true"/>
    </bean>

    <!-- redis template definition p表示对该bean里面的属性进行注入，格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connection-factory-ref="jedisConnectionFactory">
        <!-- 对于普通K-V操作时，key采取的序列化策略,建议key/hashKey采用StringRedisSerializer -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <!-- Jdk序列化方式速度优于json的方式,但占用的存储空间比json大,并且不方便调式,因为JDK方式序列化后的字符串不可读 -->
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
            <bean class="com.hq.CloudPlatform.CA.utils.JsonRedisSerializer"/>
        </property>
        <!-- 在hash数据结构中，hash-key的序列化策略 -->
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
            <bean class="com.hq.CloudPlatform.CA.utils.JsonRedisSerializer"/>
        </property>
    </bean>

    <!-- 对string操作的封装 -->
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
          p:connection-factory-ref="jedisConnectionFactory"/>
</beans>